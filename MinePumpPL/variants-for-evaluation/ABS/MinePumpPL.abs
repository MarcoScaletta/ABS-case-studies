
data WaterLevel = Low, Normal, High;

interface EnvironmentI {

	/*@
	  @ ensures higher(\old(this.getWaterLevel()), Low) ==> (higher(\old(this.getWaterLevel()), this.getWaterLevel()));
	  @ */
	Unit lowerWaterLevel();

	/*@
	  @ ensures higher(High, \old(this.getWaterLevel())) ==> (higher(this.getWaterLevel(), \old(this.getWaterLevel())))
	  @ */
	Unit waterRise();

	/*@
	  @ ensures this.isMethaneLevelCritical() == !\old(this.isMethaneLevelCritical());
	  @ */
	Unit changeMethaneLevel();

	Bool isMethaneLevelCritical();

	/*@
	  @ ensures \result <==> (waterLevel1 != waterLevel2 && (waterLevel1 == High || waterLevel2 == Low));
	  @ */
	Bool higher(WaterLevel waterLevel1, WaterLevel waterLevel2);

	WaterLevel getWaterLevel();



  /*@
    @ ensures \result == (High != this.getWaterLevel())
    @ */
  boolean isHighWaterSensorDry();



  /*@
    @ ensures \result == (Low == this.getWaterLevel())
    @ */
  boolean isLowWaterSensorDry ();

    Bool isEmergency();
}


class MinePump (EnvironmentI env) {

    // CORE

	Bool pumpRunning = False;

	Bool systemActive = True;

    /*@
      @ ensures pumpRunning ==> (env.higher(\old(env.getWaterLevel()), Low) ==> (env.higher(\old(env.getWaterLevel()), env.getWaterLevel())));
      @*/
	Unit timeShift() {
		if (pumpRunning)
			env.lowerWaterLevel();
	}

    /*@
      @ ensures (countProblems() == 0) ==> pumpRunning;
      @ */
	Unit activatePump() {
        if(countProblems() == 0)
            pumpRunning = True;
	}

    /*@
      @ ensures !pumpRunning;
      @ */
	Unit deactivatePump() {
		pumpRunning = False;
	}

    //needed for remodelling
    /*@
      @ ensures \result >= 0;
      @ */
    Int countProblems(){
        return 0;
    }

    /*@
      @ ensures \result == env.isMethaneLevelCritical();
      @ */
	Bool isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	Environment getEnv() {
		return env;
	}

    // END OF CORE


    // LOW 

    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isLowWaterLevel(),l)) ==> !pumpRunning;
      @ */
    Unit low_timeShift(){
        l: timeShift();
        if (systemActive && pumpRunning && isLowWaterLevel()) {
            deactivatePump();
        }
    }

    /*@
      @ ensures \result == !env.isLowWaterSensorDry();
      @ */
    Bool isLowWaterLevel() { // reused
        return !env.isLowWaterSensorDry();
    }
    
    // END OF LOW


    // HIGH 

    /*@
      @ ensures \result == !env.isHighWaterSensorDry();
      @ */
    Bool isHighWaterLevel() { // reused
        return !env.isHighWaterSensorDry();
    }

    /*@
      @ ensures \old(systemActive, l) && !\old(pumpRunning, l) && \old(isHighWaterLevel(), l)
      @           ==> ((\old(countProblems() ,l) == 0) ==> pumpRunning);
      @ */
    Unit high_timeShift() {
        l:timeShift();
        if(systemActive && !pumpRunning && isHighWaterLevel())
            activatePump();
    }

    // END OF HIGH

    
    // ALARM 

    /*@
      @ ensures (systemActive && pumpRunning && isMethaneAlarm()) ==> !pumpRunning;
      @ */
    Unit alarm_timeShift() {
        if (systemActive && pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            timeShift();
        }
    }

    // END OF ALARM

    // LOW_HIGH

    /*@
      @ ensures \old(systemActive, l) && !\old(pumpRunning, l) && \old(isHighWaterLevel(), l)
      @           ==> ((\old(countProblems() ,l) == 0) ==> pumpRunning);
      @ */
    Unit low_high_timeShift() {
        l:low_timeShift();
        if(systemActive && !pumpRunning && isHighWaterLevel())
            activatePump();
    }

    // END OF LOW_HIGH


    // LOW_ALARM

    /*@
      @ ensures (systemActive && pumpRunning && isMethaneAlarm()) ==> !pumpRunning;
      @ */
    Unit alarm_low_timeShift() {
        if (systemActive && pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            low_timeShift();
        }
    }

    // END OF LOW_ALARM


    // HIGH_ALARM

    /*@
      @ ensures (systemActive && pumpRunning && isMethaneAlarm()) ==> !pumpRunning;
      @ */
    Unit high_alarm_timeShift() {
        if (systemActive && pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            high_timeShift();
        }
    }

    // END OF HIGH_ALARM



    // LOW_HIGH_ALARM


    /*@
      @ ensures (systemActive && pumpRunning && isMethaneAlarm()) ==> !pumpRunning;
      @ */
    Unit low_high_alarm_timeShift() {
        if (systemActive && pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            low_high_timeShift();
        }
    }

    // END OF LOW_HIGH_ALARM


    // EMERGENCY
    
    Bool isEmergency(){
        return env.isEmergency();
    }
    
    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isEmergency(),l)) ==> !pumpRunning;
      @ */
    Unit emergency_timeShift(){
        l: timeShift();
        if(systemActive && pumpRunning && isEmergency())
            deactivatePump();
    }

    // END OF EMERGENCY



    // LOW_EMERGENCY

    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isEmergency(),l)) ==> !pumpRunning;
      @ */
    Unit low_emergency_timeShift(){
        l: low_timeShift();
        if(systemActive && pumpRunning && isEmergency())
            deactivatePump();
    }

    // END OF LOW_EMERGENCY


    // HIGH_EMERGENCY

    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isEmergency(),l)) ==> !pumpRunning;
      @ */
    Unit high_emergency_timeShift(){

        l: high_timeShift();
        if(systemActive && pumpRunning && isEmergency())
            deactivatePump();

    }

    // END OF HIGH_EMERGENCY


    // ALARM_EMERGENCY

    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isEmergency(),l)) ==> !pumpRunning;
      @ */
    Unit alarm_emergency_timeShift(){

        l: alarm_timeShift();
        if(systemActive && pumpRunning && isEmergency())
            deactivatePump();
        
    }

    // END OF ALARM_EMERGENCY

    // LOW_HIGH_EMERGENCY

    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isEmergency(),l)) ==> !pumpRunning;
      @ */
    Unit low_high_emergency_timeShift(){

        l: low_high_timeShift();
        if(systemActive && pumpRunning && isEmergency())
            deactivatePump();

    }

    // END OF LOW_HIGH_EMERGENCY



    // LOW_ALARM_EMERGENCY

    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isEmergency(),l)) ==> !pumpRunning;
      @ */
    Unit low_alarm_emergency_timeShift(){

        l: low_alarm_timeShift();
        if(systemActive && pumpRunning && isEmergency())
            deactivatePump();
    }

    // END OF LOW_ALARM_EMERGENCY



    // HIGH_ALARM_EMERGENCY

    
    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isEmergency(),l)) ==> !pumpRunning;
      @ */
    Unit high_alarm_emergency_timeShift(){
        l: high_alarm_timeShift();
        if(systemActive && pumpRunning && isEmergency())
            deactivatePump();
    }

    // END OF HIGH_ALARM_EMERGENCY


    // LOW_HIGH_ALARM_EMERGENCY


    /*@
      @ ensures (\old(systemActive, l) && \old(pumpRunning,l) && \old(isEmergency(),l)) ==> !pumpRunning;
      @ */
    Unit low_high_alarm_emergency_timeShift(){
        l: low_high_alarm_timeShift();
        if(systemActive && pumpRunning && isEmergency())
            deactivatePump();
    }

    // END OF LOW_HIGH_ALARM_EMERGENCY
}